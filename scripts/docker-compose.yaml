version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.10-management
    container_name: ${CONTAINER_NAME_RABBITMQ}
    stdin_open: true
    tty: true
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - ./rabbitmq/init-rabbitmq.sh:/docker-entrypoint-initdb.d/init-rabbitmq.sh
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    env_file:
      - .env

  mongodb:
    image: 'mongo:7.0.5'
    container_name: ${CONTAINER_NAME_MONGODB}
    environment:
      - 'MONGO_INITDB_DATABASE=my_database'
      - 'MONGO_INITDB_ROOT_PASSWORD=secret'
      - 'MONGO_INITDB_ROOT_USERNAME=root'
    ports:
      - '27017:27017'
    volumes:
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/mongo-init.js
  mongo-express:
    image: mongo-express:1.0.2
    container_name: ${CONTAINER_NAME_MONGODB_EXPRESS}
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: secret
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_SERVER: ${CONTAINER_NAME_MONGODB}
      ME_CONFIG_BASICAUTH_USERNAME: user
      ME_CONFIG_BASICAUTH_PASSWORD: password

  postgres:
    image: 'postgres:16.1'
    container_name: ${CONTAINER_NAME_POSTGRES}
    ports:
      - '5432:5432'
    environment:
      - 'POSTGRES_USER=my_user'
      - 'POSTGRES_DB=my_database'
      - 'POSTGRES_PASSWORD=secret'
    volumes:
      - ./postgres/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
  adminer:
    image: 'adminer:4.8.1'
    container_name: ${CONTAINER_NAME_ADMINER}
    restart: always
    environment:
      - 'ADMINER_PLUGINS=tables-filter tinymce'
    ports:
      - 8080:8080

  web:
    image: 'nginx:alpine3.18-perl'
    container_name: ${CONTAINER_NAME_NGINX}
    stdin_open: true
    tty: true
    environment:
      - NGINX_HOST=example.com
      - NGINX_PORT=80
    ports:
      - "9090:80"
    volumes:
      - ./nginx/default.conf.template:/etc/nginx/templates/default.conf.template
      - ./nginx/response.json:/usr/share/nginx/html/response.json
      - ./nginx/500.json:/usr/share/nginx/html/error/500.json

  kafka:
    image: bitnami/kafka:3.7.0
    container_name: ${CONTAINER_NAME_KAFKA}
    stdin_open: true
    tty: true
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    ports:
      - "9092:9092"

  publish:
    image: python:3.8.18
    container_name: ${CONTAINER_NAME_PYTHON}
    working_dir: /app
    volumes:
      - ./rabbitmq/publish:/app/publish
    depends_on:
      - rabbitmq
    command: sh -c "tail -f /dev/null"
  configurator:
    image: docker:25.0-dind
    container_name: ${CONTAINER_NAME_DOCKER}
    stdin_open: true
    tty: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/docker-entrypoint.sh:/docker-entrypoint.sh:ro
    depends_on:
      - rabbitmq
      - publish
    command: sh -c "./docker-entrypoint.sh"
    env_file:
      - .env